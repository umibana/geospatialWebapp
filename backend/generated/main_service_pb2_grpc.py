# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import files_pb2 as files__pb2
import geospatial_pb2 as geospatial__pb2

GRPC_GENERATED_VERSION = '1.74.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in main_service_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class GeospatialServiceStub(object):
    """Aggregated service combining all RPC methods from different domains
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.HelloWorld = channel.unary_unary(
                '/geospatial.GeospatialService/HelloWorld',
                request_serializer=geospatial__pb2.HelloWorldRequest.SerializeToString,
                response_deserializer=geospatial__pb2.HelloWorldResponse.FromString,
                _registered_method=True)
        self.EchoParameter = channel.unary_unary(
                '/geospatial.GeospatialService/EchoParameter',
                request_serializer=geospatial__pb2.EchoParameterRequest.SerializeToString,
                response_deserializer=geospatial__pb2.EchoParameterResponse.FromString,
                _registered_method=True)
        self.HealthCheck = channel.unary_unary(
                '/geospatial.GeospatialService/HealthCheck',
                request_serializer=geospatial__pb2.HealthCheckRequest.SerializeToString,
                response_deserializer=geospatial__pb2.HealthCheckResponse.FromString,
                _registered_method=True)
        self.GetFeatures = channel.unary_unary(
                '/geospatial.GeospatialService/GetFeatures',
                request_serializer=geospatial__pb2.GetFeaturesRequest.SerializeToString,
                response_deserializer=geospatial__pb2.GetFeaturesResponse.FromString,
                _registered_method=True)
        self.GetBatchDataStreamed = channel.unary_stream(
                '/geospatial.GeospatialService/GetBatchDataStreamed',
                request_serializer=geospatial__pb2.GetBatchDataRequest.SerializeToString,
                response_deserializer=geospatial__pb2.GetBatchDataChunk.FromString,
                _registered_method=True)
        self.AnalyzeCsv = channel.unary_unary(
                '/geospatial.GeospatialService/AnalyzeCsv',
                request_serializer=files__pb2.AnalyzeCsvRequest.SerializeToString,
                response_deserializer=files__pb2.AnalyzeCsvResponse.FromString,
                _registered_method=True)
        self.SendFile = channel.unary_unary(
                '/geospatial.GeospatialService/SendFile',
                request_serializer=files__pb2.SendFileRequest.SerializeToString,
                response_deserializer=files__pb2.SendFileResponse.FromString,
                _registered_method=True)
        self.GetLoadedDataStats = channel.unary_unary(
                '/geospatial.GeospatialService/GetLoadedDataStats',
                request_serializer=files__pb2.GetLoadedDataStatsRequest.SerializeToString,
                response_deserializer=files__pb2.GetLoadedDataStatsResponse.FromString,
                _registered_method=True)
        self.GetLoadedDataChunk = channel.unary_unary(
                '/geospatial.GeospatialService/GetLoadedDataChunk',
                request_serializer=files__pb2.GetLoadedDataChunkRequest.SerializeToString,
                response_deserializer=files__pb2.GetLoadedDataChunkResponse.FromString,
                _registered_method=True)


class GeospatialServiceServicer(object):
    """Aggregated service combining all RPC methods from different domains
    """

    def HelloWorld(self, request, context):
        """Basic services (from geospatial.proto)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def EchoParameter(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def HealthCheck(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetFeatures(self, request, context):
        """Geospatial data methods (from geospatial.proto)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetBatchDataStreamed(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AnalyzeCsv(self, request, context):
        """CSV file processing methods (from files.proto)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendFile(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetLoadedDataStats(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetLoadedDataChunk(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_GeospatialServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'HelloWorld': grpc.unary_unary_rpc_method_handler(
                    servicer.HelloWorld,
                    request_deserializer=geospatial__pb2.HelloWorldRequest.FromString,
                    response_serializer=geospatial__pb2.HelloWorldResponse.SerializeToString,
            ),
            'EchoParameter': grpc.unary_unary_rpc_method_handler(
                    servicer.EchoParameter,
                    request_deserializer=geospatial__pb2.EchoParameterRequest.FromString,
                    response_serializer=geospatial__pb2.EchoParameterResponse.SerializeToString,
            ),
            'HealthCheck': grpc.unary_unary_rpc_method_handler(
                    servicer.HealthCheck,
                    request_deserializer=geospatial__pb2.HealthCheckRequest.FromString,
                    response_serializer=geospatial__pb2.HealthCheckResponse.SerializeToString,
            ),
            'GetFeatures': grpc.unary_unary_rpc_method_handler(
                    servicer.GetFeatures,
                    request_deserializer=geospatial__pb2.GetFeaturesRequest.FromString,
                    response_serializer=geospatial__pb2.GetFeaturesResponse.SerializeToString,
            ),
            'GetBatchDataStreamed': grpc.unary_stream_rpc_method_handler(
                    servicer.GetBatchDataStreamed,
                    request_deserializer=geospatial__pb2.GetBatchDataRequest.FromString,
                    response_serializer=geospatial__pb2.GetBatchDataChunk.SerializeToString,
            ),
            'AnalyzeCsv': grpc.unary_unary_rpc_method_handler(
                    servicer.AnalyzeCsv,
                    request_deserializer=files__pb2.AnalyzeCsvRequest.FromString,
                    response_serializer=files__pb2.AnalyzeCsvResponse.SerializeToString,
            ),
            'SendFile': grpc.unary_unary_rpc_method_handler(
                    servicer.SendFile,
                    request_deserializer=files__pb2.SendFileRequest.FromString,
                    response_serializer=files__pb2.SendFileResponse.SerializeToString,
            ),
            'GetLoadedDataStats': grpc.unary_unary_rpc_method_handler(
                    servicer.GetLoadedDataStats,
                    request_deserializer=files__pb2.GetLoadedDataStatsRequest.FromString,
                    response_serializer=files__pb2.GetLoadedDataStatsResponse.SerializeToString,
            ),
            'GetLoadedDataChunk': grpc.unary_unary_rpc_method_handler(
                    servicer.GetLoadedDataChunk,
                    request_deserializer=files__pb2.GetLoadedDataChunkRequest.FromString,
                    response_serializer=files__pb2.GetLoadedDataChunkResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'geospatial.GeospatialService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('geospatial.GeospatialService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class GeospatialService(object):
    """Aggregated service combining all RPC methods from different domains
    """

    @staticmethod
    def HelloWorld(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/geospatial.GeospatialService/HelloWorld',
            geospatial__pb2.HelloWorldRequest.SerializeToString,
            geospatial__pb2.HelloWorldResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def EchoParameter(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/geospatial.GeospatialService/EchoParameter',
            geospatial__pb2.EchoParameterRequest.SerializeToString,
            geospatial__pb2.EchoParameterResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def HealthCheck(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/geospatial.GeospatialService/HealthCheck',
            geospatial__pb2.HealthCheckRequest.SerializeToString,
            geospatial__pb2.HealthCheckResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetFeatures(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/geospatial.GeospatialService/GetFeatures',
            geospatial__pb2.GetFeaturesRequest.SerializeToString,
            geospatial__pb2.GetFeaturesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetBatchDataStreamed(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/geospatial.GeospatialService/GetBatchDataStreamed',
            geospatial__pb2.GetBatchDataRequest.SerializeToString,
            geospatial__pb2.GetBatchDataChunk.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def AnalyzeCsv(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/geospatial.GeospatialService/AnalyzeCsv',
            files__pb2.AnalyzeCsvRequest.SerializeToString,
            files__pb2.AnalyzeCsvResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SendFile(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/geospatial.GeospatialService/SendFile',
            files__pb2.SendFileRequest.SerializeToString,
            files__pb2.SendFileResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetLoadedDataStats(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/geospatial.GeospatialService/GetLoadedDataStats',
            files__pb2.GetLoadedDataStatsRequest.SerializeToString,
            files__pb2.GetLoadedDataStatsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetLoadedDataChunk(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/geospatial.GeospatialService/GetLoadedDataChunk',
            files__pb2.GetLoadedDataChunkRequest.SerializeToString,
            files__pb2.GetLoadedDataChunkResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
