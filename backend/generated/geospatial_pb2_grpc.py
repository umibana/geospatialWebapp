# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import geospatial_pb2 as geospatial__pb2


class GeospatialServiceStub(object):
    """gRPC service definition
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetFeatures = channel.unary_unary(
                '/geospatial.GeospatialService/GetFeatures',
                request_serializer=geospatial__pb2.GetFeaturesRequest.SerializeToString,
                response_deserializer=geospatial__pb2.GetFeaturesResponse.FromString,
                )
        self.StreamData = channel.unary_stream(
                '/geospatial.GeospatialService/StreamData',
                request_serializer=geospatial__pb2.StreamDataRequest.SerializeToString,
                response_deserializer=geospatial__pb2.DataPoint.FromString,
                )
        self.HealthCheck = channel.unary_unary(
                '/geospatial.GeospatialService/HealthCheck',
                request_serializer=geospatial__pb2.HealthCheckRequest.SerializeToString,
                response_deserializer=geospatial__pb2.HealthCheckResponse.FromString,
                )


class GeospatialServiceServicer(object):
    """gRPC service definition
    """

    def GetFeatures(self, request, context):
        """Unary RPC for fetching features
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamData(self, request, context):
        """Server streaming RPC for real-time data
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def HealthCheck(self, request, context):
        """Health check
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_GeospatialServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetFeatures': grpc.unary_unary_rpc_method_handler(
                    servicer.GetFeatures,
                    request_deserializer=geospatial__pb2.GetFeaturesRequest.FromString,
                    response_serializer=geospatial__pb2.GetFeaturesResponse.SerializeToString,
            ),
            'StreamData': grpc.unary_stream_rpc_method_handler(
                    servicer.StreamData,
                    request_deserializer=geospatial__pb2.StreamDataRequest.FromString,
                    response_serializer=geospatial__pb2.DataPoint.SerializeToString,
            ),
            'HealthCheck': grpc.unary_unary_rpc_method_handler(
                    servicer.HealthCheck,
                    request_deserializer=geospatial__pb2.HealthCheckRequest.FromString,
                    response_serializer=geospatial__pb2.HealthCheckResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'geospatial.GeospatialService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class GeospatialService(object):
    """gRPC service definition
    """

    @staticmethod
    def GetFeatures(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/geospatial.GeospatialService/GetFeatures',
            geospatial__pb2.GetFeaturesRequest.SerializeToString,
            geospatial__pb2.GetFeaturesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StreamData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/geospatial.GeospatialService/StreamData',
            geospatial__pb2.StreamDataRequest.SerializeToString,
            geospatial__pb2.DataPoint.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def HealthCheck(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/geospatial.GeospatialService/HealthCheck',
            geospatial__pb2.HealthCheckRequest.SerializeToString,
            geospatial__pb2.HealthCheckResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
