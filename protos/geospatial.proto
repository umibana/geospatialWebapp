syntax = "proto3";

package geospatial;

import "files.proto";

// =============================================================================
// TIPOS DE DATOS COMUNES
// =============================================================================

message Coordinate {
  double latitude = 1;
  double longitude = 2;
  optional double altitude = 3;
}

message BoundingBox {
  Coordinate northeast = 1;
  Coordinate southwest = 2;
}

message GeospatialFeature {
  string id = 1;
  string name = 2;
  Coordinate location = 3;
  map<string, string> properties = 4;
  int64 timestamp = 5;
}

message DataPoint {
  string id = 1;
  Coordinate location = 2;
  double value = 3;
  string unit = 4;
  int64 timestamp = 5;
  map<string, string> metadata = 6;
}

// Mensajes de formato de datos optimizados
message OptimizedDataPoint {
  string id = 1;
  float latitude = 2;    // float32 en lugar de double
  float longitude = 3;   // float32 en lugar de double
  float altitude = 4;    // float32 en lugar de double
  float value = 5;       // float32 en lugar de double
  string unit = 6;
  int64 timestamp = 7;
  string generation_method = 8; // Metadatos aplanados
}

// =============================================================================
// SOLICITUDES/RESPUESTAS DEL SERVICIO PRINCIPAL
// =============================================================================

// Ejemplo simple de Hello World
message HelloWorldRequest {
  string message = 1;
}

message HelloWorldResponse {
  string message = 1;
}

// Ejemplo de parámetro de echo
message EchoParameterRequest {
  double value = 1;
  string operation = 2;
}

message EchoParameterResponse {
  double original_value = 1;
  double processed_value = 2;
  string operation = 3;
}

// Verificación de salud
message HealthCheckRequest {}

message HealthCheckResponse {
  bool healthy = 1;
  string version = 2;
  map<string, string> status = 3;
}

// =============================================================================
// SOLICITUDES/RESPUESTAS DEL SERVICIO GEOESPACIAL
// =============================================================================

message GetFeaturesRequest {
  BoundingBox bounds = 1;
  repeated string feature_types = 2;
  int32 limit = 3;
}

message GetFeaturesResponse {
  repeated GeospatialFeature features = 1;
  int32 total_count = 2;
}

message StreamDataRequest {
  BoundingBox bounds = 1;
  repeated string data_types = 2;
  int32 max_points_per_second = 3;
}

message GetBatchDataRequest {
  BoundingBox bounds = 1;
  repeated string data_types = 2;
  int32 max_points = 3;
  int32 resolution = 4; // Resolución de cuadrícula para datos generados
}

message GetBatchDataResponse {
  repeated DataPoint data_points = 1;
  int32 total_count = 2;
  string generation_method = 3;
}

message GetBatchDataOptimizedResponse {
  repeated OptimizedDataPoint data_points = 1;
  int32 total_count = 2;
  string generation_method = 3;
}

// =============================================================================
// FORMATO COLUMNAR PARA DATOS MASIVOS
// =============================================================================

// Nuevo formato columnar para procesamiento eficiente de datasets masivos
message ColumnarDataChunk {
  repeated string id = 1;                    // Point IDs
  repeated double x = 2;                     // X coordinates (longitude)
  repeated double y = 3;                     // Y coordinates (latitude)  
  repeated double z = 4;                     // Z values (main value like elevation)
  repeated string id_value = 5;              // ID value column
  map<string, DoubleArray> additional_data = 6;  // Dynamic additional columns (temperature, pressure, etc.)
  int32 chunk_number = 7;
  int32 total_chunks = 8;
  int32 points_in_chunk = 9;
  bool is_final_chunk = 10;
  string generation_method = 11;
}

// Helper message for dynamic double arrays
message DoubleArray {
  repeated double values = 1;
}

// Helper message for dynamic string arrays  
message StringArray {
  repeated string values = 1;
}

// Response with new columnar format
message GetBatchDataColumnarResponse {
  ColumnarDataChunk columnar_data = 1;
  int32 total_count = 2;
  string generation_method = 3;
}

// Legacy streaming by chunks (DEPRECATED - use columnar format)
message GetBatchDataChunk {
  repeated DataPoint data_points = 1;
  int32 chunk_number = 2;
  int32 total_chunks = 3;
  int32 points_in_chunk = 4;
  bool is_final_chunk = 5;
  string generation_method = 6;
}
