syntax = "proto3";

package geospatial;

// Common data types for geospatial operations

message Coordinate {
  double latitude = 1;
  double longitude = 2;
  optional double altitude = 3;
}

message BoundingBox {
  Coordinate northeast = 1;
  Coordinate southwest = 2;
}

message GeospatialFeature {
  string id = 1;
  string name = 2;
  Coordinate location = 3;
  map<string, string> properties = 4;
  int64 timestamp = 5;
}

message DataPoint {
  string id = 1;
  Coordinate location = 2;
  double value = 3;
  string unit = 4;
  int64 timestamp = 5;
  map<string, string> metadata = 6;
}

// Request/Response messages for the service

// Simple Hello World example
message HelloWorldRequest {
  string message = 1;
}

message HelloWorldResponse {
  string message = 1;
}

// Echo Parameter example
message EchoParameterRequest {
  double value = 1;
  string operation = 2;
}

message EchoParameterResponse {
  double original_value = 1;
  double processed_value = 2;
  string operation = 3;
}

message GetFeaturesRequest {
  BoundingBox bounds = 1;
  repeated string feature_types = 2;
  int32 limit = 3;
}

message GetFeaturesResponse {
  repeated GeospatialFeature features = 1;
  int32 total_count = 2;
}

message StreamDataRequest {
  BoundingBox bounds = 1;
  repeated string data_types = 2;
  int32 max_points_per_second = 3;
}

message GetBatchDataRequest {
  BoundingBox bounds = 1;
  repeated string data_types = 2;
  int32 max_points = 3;
  int32 resolution = 4; // Grid resolution for generated data
}

message GetBatchDataResponse {
  repeated DataPoint data_points = 1;
  int32 total_count = 2;
  string generation_method = 3;
}

// Optimized data format messages
message OptimizedDataPoint {
  string id = 1;
  float latitude = 2;    // float32 instead of double
  float longitude = 3;   // float32 instead of double
  float altitude = 4;    // float32 instead of double
  float value = 5;       // float32 instead of double
  string unit = 6;
  int64 timestamp = 7;
  string generation_method = 8; // Flattened metadata
}

message GetBatchDataOptimizedResponse {
  repeated OptimizedDataPoint data_points = 1;
  int32 total_count = 2;
  string generation_method = 3;
}

// Chunked streaming messages  
message GetBatchDataChunk {
  repeated DataPoint data_points = 1;
  int32 chunk_number = 2;
  int32 total_chunks = 3;
  int32 points_in_chunk = 4;
  bool is_final_chunk = 5;
  string generation_method = 6;
}

message HealthCheckRequest {}

message HealthCheckResponse {
  bool healthy = 1;
  string version = 2;
  map<string, string> status = 3;
}

// gRPC service definition
service GeospatialService {
  // Simple examples for testing and learning
  rpc HelloWorld(HelloWorldRequest) returns (HelloWorldResponse);
  rpc EchoParameter(EchoParameterRequest) returns (EchoParameterResponse);
  
  // Unary RPC for fetching features
  rpc GetFeatures(GetFeaturesRequest) returns (GetFeaturesResponse);
  
  // âœ… RECOMMENDED: Lightweight streaming for large datasets (UI-friendly)
  rpc GetBatchDataStreamed(GetBatchDataRequest) returns (stream GetBatchDataChunk);
  
  // Health check
  rpc HealthCheck(HealthCheckRequest) returns (HealthCheckResponse);
} 